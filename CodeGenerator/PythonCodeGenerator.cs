using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using System.Xml.Xsl;
using CodeGenerator.Model;
using CodeGenerator.Utils;
using Rhino.Runtime;

namespace CodeGenerator
{
    /// <summary>
    /// Code generator to generate python code based on UI input.
    /// </summary>
    public class PythonCodeGenerator
    {
        private const string header = @"
from compas_fea.cad import rhino
from compas_fea.structure import ElasticIsotropic
from compas_fea.structure import ElementProperties as Properties
from compas_fea.structure import GeneralDisplacement
from compas_fea.structure import GeneralStep
from compas_fea.structure import GravityLoad
from compas_fea.structure import AreaLoad
from compas_fea.structure import PointLoad
from compas_fea.structure import PinnedDisplacement
from compas_fea.structure import RollerDisplacementX
from compas_fea.structure import RollerDisplacementY
from compas_fea.structure import RollerDisplacementXY
from compas_fea.structure import ShellSection
from compas_fea.structure import Structure

import sandwichmodel_main as SMM

# Author(s): Andrew Liew (github.com/andrewliew), Benjamin Berger (github.com/Beberger)
# Generated by StrucEngLib Plugin

name = 'Rahmen'
path = 'C:/Temp/'
mdl = Structure(name=name, path=path)
";

        private const string footer = @"# Steps
# mdl.add([
#     GeneralStep(name='step_bc', displacements=['disp_pinned'], nlgeom=False),
#     GeneralStep(name='step_load', loads=['load_gravity','load_pressure'], nlgeom=False)
#     ])
# 
# mdl.steps_order = ['step_bc','step_load']

# Summary

mdl.summary()

# Run

mdl.analyse_and_extract(software='abaqus', fields=['u','sf','sm'])

# rhino.plot_data(mdl, step='step_load', field='sm1',cbar_size=1)
# rhino.plot_data(mdl, step='step_load', field='sm2',cbar_size=1)
# rhino.plot_data(mdl, step='step_load', field='sm3',cbar_size=1)
# rhino.plot_data(mdl, step='step_load', field='sf4',cbar_size=1)
# rhino.plot_data(mdl, step='step_load', field='sf5',cbar_size=1)
# rhino.plot_data(mdl, step='step_load', field='sf1',cbar_size=1)
# rhino.plot_data(mdl, step='step_load', field='sf2',cbar_size=1)
# rhino.plot_data(mdl, step='step_load', field='sf3',cbar_size=1)
# rhino.plot_data(mdl, step='step_load', field='um',cbar_size=1)
# #print(mdl.elements[251])
# #print(mdl.elements[100])
# #print(mdl.elements[222])
";
        
        private readonly Workbench _model;

        public PythonCodeGenerator(Workbench model)
        {
            _model = model;
        }

        private int _loadIdCounter = 0;
        private string LoadId() => "load_" + _loadIdCounter++;
        private string LayerId(string id) => id + "_element";
        private string SetId(string id) => id + "_set";
        private string SectionId(string id) => id + "_sec";
        private string PropId(string id) => id + "_prop";
        private string MatElasticId(string id) => id + "_mat_elastic";
        private string DispId(string id) => id + "_disp";

        private string LayersToStringList(List<Layer> layers)
        {
            StringBuilder b = new StringBuilder();
            b.Append("[ ");
            int n = 0;
            foreach (var l in layers)
            {
                if (n > 0)
                {
                    b.Append(", ");
                }

                b.Append($"'{l.GetName()}'");
                n++;
            }

            b.Append(" ] ");
            return b.ToString();
        }


        public string Generate()
        {
            _loadIdCounter = 0;

            StringBuilder b = new StringBuilder();

            b.Append(header);
            foreach (var layer in _model.Layers)
            {
                if (layer.LayerType == LayerType.ELEMENT)
                {
                    var element = (Element) layer;
                    var layerId = LayerId(element.GetName());
                    var layerName = element.GetName();
                    b.Append($@"
# == Element {layerName}
");
                    b.Append(
                        $@"rhino.add_nodes_elements_from_layers(mdl, mesh_type='ShellElement', layers=['{layerName}'])
");
                    var mat = element.ElementMaterialElastic;
                    var matId = MatElasticId(layerId);
                    b.Append(
                        $@"mdl.add(ElasticIsotropic(name='{matId}', E={mat.E}, v={mat.V}, p={mat.P}))
");
                    var sectionId = SectionId(layerId);
                    b.Append(
                        $@"mdl.add(ShellSection(name='{sectionId}', t={element.ElementShellSection.Thickness})) #[mm]
");
                    var propId = PropId(layerId);
                    b.Append(
                        $@"mdl.add(Properties(name='{propId}', material='{matId}', section='{sectionId}', elset='{layerName}'))
");
                }

                if (layer.LayerType == LayerType.SET)
                {
                    var set = (Set) layer;
                    var setName = set.GetName();
                    var setId = SetId(setName);
                    b.Append($@"
# == Set {set.GetName()}
");
                    b.Append($@"rhino.add_sets_from_layers(mdl, layers=['{setName}'] )
");
                    var dispId = DispId(setId);
                    b.Append($@"mdl.add([PinnedDisplacement(name='{dispId}', nodes='{setName}')])
");
                }
            }

            foreach (var load in _model.Loads)
            {
                if (load.LoadType == LoadType.Area)
                {
                    var area = (LoadArea) load;
                    string layersList = LayersToStringList(load.Layers);
                    b.Append($@"
# == Load Area {layersList}
");
                    string loadId = LoadId() + "_area";
                    b.Append(
                        $@"mdl.add(AreaLoad(name='{loadId}', elements={layersList}, z={area.Z}, axes='{area.Axes}'))
");
                }
                else if (load.LoadType == LoadType.Gravity)
                {
                    string layersList = LayersToStringList(load.Layers);
                    b.Append($@"#
 == Load Gravity {layersList}
");
                    string loadId = LoadId() + "_gravity";
                    b.Append($@"mdl.add(GravityLoad(name='{loadId}', elements={layersList}))
");
                }
                else
                {
                    // XXX: TODO
                }
            }

            b.Append($@"
# == Steps TODO\\n");

            b.Append(footer);

            return b.ToString();
        }
    }
}